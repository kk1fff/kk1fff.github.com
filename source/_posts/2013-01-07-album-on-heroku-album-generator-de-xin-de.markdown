---
layout: post
title: "在 Heroku 上面放相簿 - album-generator 的心得"
date: 2013-01-07 01:54
comments: true
categories: 
---

{% img http://i1162.photobucket.com/albums/q535/kk1fff/87A25E555FEB71672013-01-074E0A534824354_zpsbb519c9e.png '用 album-generator 產生的相簿' %}

我做了一個叫做 album-generator 的東西，可以把資料夾裡面的相片組織成網路相簿。還附上了一些基本的檔案
可以在 heroku 上直接用，程式碼放在 github 上面，大家快來看喔！

* 程式碼網址：<a href="https://github.com/kk1fff/album-generator">@github</a>
* 相簿網址：<a href="http://photo.patrickz.net/">Patrick's Album</a>

## 楔子

已經有一段時間一直在找，希望能夠有一種東西可以用來取代 flickr，建立自己的相簿。Survey 了一下老牌
Gallery，又覺得不太喜歡再用 PHP。而且 PHP 要自己用 AWS 來 Host，實在不太喜歡。想想乾脆自己寫一個
好了，簡簡單單，用 file-based 的作法就好。

沒有花太多時間考慮，元旦的四天假期，去淡水拍了夕陽，想要找地方放上去。於是就想著，用最簡單的方法來作一個
相簿。

## 一個禮拜的甘苦談

album-generator 是用 node.js 寫成的。因為我習慣把相簿用資料夾和時間來組織，所以我希望有個東西能
夠在我不需要更改資料夾 Layout 的狀況下就可以替我產生出一個相簿。本來的想法是這樣，在每個資料夾裡面放一個
album.json 檔案，讓程式去掃描 album.json，只要找到 album.json，就去尋找這個 album.json 指定的
檔案，把這些相片收集起來，組成一個列表，就變成相簿。基於這個非常非常簡單的想法，我先從尋找檔案開始。尋找
檔案需要透過許多 API，另外基於 node.js 非常強調非同步函數，所以 callback 好多層。本來是想要不要呼叫
同步的版本，後來想算了，就給他 callback 吧。

{% img http://i1162.photobucket.com/albums/q535/kk1fff/87A25E555FEB71672013-01-074E0A534820414_zpse153a236.png '我的相片資料夾' %}

相片遇到需要縮圖，就直接運用暴力法：去查 ImageMagick 的指令，然後從 node.js 去呼叫。這樣的作法會非常的
醜，而且不具有可攜性，但是卻非常的快。遇到讀取 EXIF，本來也是用 ImageMagick 去讀取，讀回來一個一個去把
文字 Parse 出來，後來看到 exiftool，就另外呼叫了一次 exiftool。exiftool 產生的報表非常漂亮，我沒有
花太多精力去了解 exiftool 怎麼用，但是我知道他產生的格式是我要的東西，所以我就直接 parse 他了。

經過四天（嚴格來說只有兩天，因為下雨又太冷，只好待在家寫程式。）我終於把我的成品送上 heroku，送上 heroku
之前還把 heroku 需要的 Procfile 也整合進去，這樣只要從 github 抓下來就可以直接用了。貼到 Facebook
看看大家有沒有興趣。剛開始 feedback 很多，缺乏上一頁下一頁、留言區、facebook 等等，於是才開始漸漸的
加。加東西有時候需要 refactor，就趁機把當初寫的醜不拉機的程式碼修正一下。一下發現這邊需要這些，就加上去，
發現另外一邊需要這個，就再加一下。截至目前為止，一個禮拜了，已經有上一頁、下一頁、Disqus 整合、Google
Analystics 整合、相片分類標籤、自動從 Exif 中取得相簿分類標籤，也修了好幾版 CSS，雖然還未成氣候，但是
一切都還在緩慢的發展中。

## 心得：又醜又弱的開始、一步步做好

現在 album-generator 有 12 個 node.js 的 Javascript file，雖然不大，但以一個禮拜的年紀和一個開發者
的時間精力來看，也不算太小。但這些檔案最初其實都是從一個 main.js 裡面長出來。剛開始我不想花精力分配檔案，
所以全都塞進 main.js，程式碼其醜無比，我不相信一個禮拜後有人能夠看得懂他。以前我是不會作這種事情的，我過去
總是要求凡是要先架構，想清楚，分工，然後一起長大，因為不甘心後來再花時間去 refactor。可是卻沒有辦法有效率
的製造出一個成品出來，至少目前我這麼思考每個東西該如何呼叫，繼承，甚至平行化的專案，沒有一個有成品。我猜是
因為其實在一個物件真正被使用之前，根本沒有辦法知道他需要什麼屬性、方法。在還沒有任何程式就先定義架構，然後
不知所以然的去實作，最後就是各模組之前的差異越來越遠。而且東西遲遲無法上線，因為模組沒有辦法獨立運作，我
也沒有辦法去知道這些東西到底是對還是錯（即使是有 test case，還是沒有辦法預期最後這個模組會如何被使用）。

但這次我嘗試了這樣的方法：先作一個非常糟但堪用的版本，然後慢慢改，每次 commit 都確保這次 commit 以後功
能還是可以正常運作。CSS 也是一樣，改到覺得好看了，再 commit，但另一方面，如果覺得改的東西太大，就趕快收
尾，讓程式恢復到可以運作的狀態，然後 commit，然後再繼續改。用類似 Patch 的方法來檢查每個版本的差異，
並且明白的寫出 commit log。也許 commit log 以後不一定會再被翻出來，但寫 log 的過程中，會讓我想清楚
我這次到底做了什麼事情。

## 小結

album-generator 的功能，是把一堆相簿資料夾，變成一群靜態網頁和圖片，有點類似 octopress 這樣。他不會
修改到原本資料夾的內容（最多就是在裡面加一個 album.json），產生出來的檔案又是靜態的，任何 server 都可以
去 host。而 heroku 需要的相關檔案也都已經放在 git 中，所以也可以直接推上 heroku，不需要額外的程式。

雖然現在只有我一個 User 和開發者，而且功能極端不完整（甚至我不知道讀到沒有 EXIF 的檔案會不會掛掉、或是
讀到比 1000 還小的檔案會不會版面壞掉），但我有空還是努力改良他，希望有一天他可以變成一個像樣的東西。有興趣
的人也趕快 fork 吧！